<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/data/repository/LeetcodeRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/data/repository/LeetcodeRepository.kt" />
              <option name="originalContent" value="package com.example.leetnote.data.repository&#10;&#10;import com.example.leetnote.data.api.LeetnoteApiService&#10;import javax.inject.Inject&#10;&#10;class LeetcodeRepository @Inject constructor(&#10;    private val api: LeetnoteApiService&#10;) {&#10;    suspend fun getUserStats(username: String): LeetcodeStatsDTO? {&#10;        val response = api.getUserStats(username)&#10;        return if (response.isSuccessful) response.body() else null&#10;    }&#10;}&#10;&#10;data class LeetcodeStatsDTO(&#10;    val username: String,&#10;    val totalSolved: Int,&#10;    val easySolved: Int,&#10;    val mediumSolved: Int,&#10;    val hardSolved: Int,&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.leetnote.data.repository&#10;&#10;import com.example.leetnote.data.api.LeetnoteApiService&#10;import javax.inject.Inject&#10;&#10;class LeetcodeRepository @Inject constructor(&#10;    private val api: LeetnoteApiService&#10;) {&#10;    suspend fun getUserStats(username: String): LeetcodeStatsDTO? {&#10;        val response = api.getUserStats(username)&#10;        return if (response.isSuccessful) response.body() else null&#10;    }&#10;}&#10;&#10;data class LeetcodeStatsDTO(&#10;    val username: String,&#10;    val totalSolved: Int,&#10;    val easySolved: Int,&#10;    val mediumSolved: Int,&#10;    val hardSolved: Int,&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/screens/profile/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/screens/profile/ProfileScreen.kt" />
              <option name="originalContent" value="package com.example.leetnote.ui.screens.profile&#10;&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.combinedClickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalBottomSheet&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.ProgressIndicatorDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import coil3.compose.AsyncImage&#10;import com.example.leetnote.R&#10;import com.example.leetnote.ui.components.ShadowButton&#10;import com.example.leetnote.ui.navigation.Screen&#10;&#10;@Composable&#10;fun ProfileScreen(&#10;    viewModel: ProfileViewModel&#10;) {&#10;    val state by viewModel.uiState.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val error by viewModel.error.collectAsState()&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Show loading indicator&#10;        if (isLoading) {&#10;            LinearProgressIndicator(modifier = Modifier.fillMaxWidth())&#10;        }&#10;&#10;        // Show error message&#10;        error?.let { msg -&gt;&#10;            Text(&#10;                text = msg,&#10;                color = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;&#10;        // Profile content&#10;        ProfileContent(&#10;            profileImageUrl = state.profileImageUrl,&#10;            username = state.username,&#10;            level = state.level,&#10;            progress = state.progress,&#10;            leetcodeUsername = state.leetcodeUsername,&#10;            solvedCount = state.solvedCount,&#10;            solvedEasy = state.solvedEasy,&#10;            solvedMedium = state.solvedMedium,&#10;            solvedHard = state.solvedHard,&#10;            easyTotal = 907,&#10;            mediumTotal = 1933,&#10;            hardTotal = 876,&#10;            onLeetCodeConfirm = { viewModel.connectLeetCode(it) },&#10;            onUploadProfileImage = { newUrl -&gt; viewModel.uploadProfileImage(newUrl) },&#10;            onDeleteProfileImage = { viewModel.deleteProfileImage() },&#10;            onUsernameChange = { newUsername -&gt; viewModel.updateUsername(newUsername) }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileContent(&#10;    profileImageUrl: String?,&#10;    username: String,&#10;    level: Int,&#10;    progress: Float,&#10;    leetcodeUsername: String?,&#10;    solvedCount: Int?,&#10;    solvedEasy: Int?,&#10;    solvedMedium: Int?,&#10;    solvedHard: Int?,&#10;    easyTotal: Int?,&#10;    mediumTotal: Int?,&#10;    hardTotal: Int?,&#10;    onLeetCodeConfirm: (String) -&gt; Unit,&#10;    onUploadProfileImage: (String) -&gt; Unit,&#10;    onDeleteProfileImage: () -&gt; Unit,&#10;    onUsernameChange: (String) -&gt; Unit&#10;) {&#10;    var input by remember { mutableStateOf(&quot;&quot;) }&#10;    var showEditDialog by remember { mutableStateOf(false) }&#10;&#10;    // Bottom sheet visibility&#10;    var showImageSheet by remember { mutableStateOf(false) }&#10;&#10;    // Image picker for uploading a new photo&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let { onUploadProfileImage(it.toString()) }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Profile row (image + username + level)&#10;        Row(verticalAlignment = Alignment.CenterVertically) {&#10;            if (!profileImageUrl.isNullOrEmpty()) {&#10;                AsyncImage(&#10;                    model = profileImageUrl,&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = Modifier&#10;                        .size(72.dp)&#10;                        .border(2.dp, MaterialTheme.colorScheme.outline, CircleShape)&#10;                        .clip(CircleShape)&#10;                        .combinedClickable(&#10;                            onClick = {},&#10;                            onLongClick = { showImageSheet = true }&#10;                        )&#10;                )&#10;            } else {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.default_profile_photo),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = Modifier&#10;                        .size(72.dp)&#10;                        .border(2.dp, MaterialTheme.colorScheme.outline, CircleShape)&#10;                        .clip(CircleShape)&#10;                        .combinedClickable(&#10;                            onClick = {},&#10;                            onLongClick = { showImageSheet = true }&#10;                        )&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Text(&#10;                        text = username.ifEmpty { &quot;No username&quot; },&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit username&quot;,&#10;                        modifier = Modifier&#10;                            .size(20.dp)&#10;                            .clickable { showEditDialog = true }&#10;                    )&#10;                }&#10;&#10;                // Level + progress bar&#10;                Text(text = &quot;Level $level&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                LinearProgressIndicator(&#10;                    progress = { progress },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(0.6f)&#10;                        .height(8.dp)&#10;                        .clip(RoundedCornerShape(4.dp)),&#10;                    color = ProgressIndicatorDefaults.linearColor,&#10;                    trackColor = ProgressIndicatorDefaults.linearTrackColor,&#10;                    strokeCap = ProgressIndicatorDefaults.LinearStrokeCap,&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // LeetCode connection section&#10;        if (leetcodeUsername == null) {&#10;            // First-time user: ask for LeetCode username&#10;            Text(text = &quot;Connect your LeetCode profile&quot;, style = MaterialTheme.typography.titleMedium)&#10;            OutlinedTextField(&#10;                value = input,&#10;                onValueChange = { input = it },&#10;                label = { Text(&quot;LeetCode Username&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            ShadowButton(&#10;                text = &quot;Confirm&quot;,&#10;                onClick = { onLeetCodeConfirm(input) },&#10;                modifier = Modifier.align(Alignment.End),&#10;                foregroundColor = Color(0xFF7B9EFF),&#10;                contentColor = Color.White&#10;            )&#10;        } else {&#10;            // Show LeetCode profile&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 16.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                elevation = CardDefaults.cardElevation(6.dp)&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;LeetCode: $leetcodeUsername&quot;,&#10;                        style = MaterialTheme.typography.titleMedium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Circular solved count&#10;                    Box(contentAlignment = Alignment.Center) {&#10;                        CircularProgressIndicator(&#10;                            progress = { (solvedCount?.coerceAtMost(2000) ?: 0) / 2000f },&#10;                            strokeWidth = 8.dp,&#10;                            modifier = Modifier.size(120.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;${solvedCount ?: 0}&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;                    Text(&quot;Problems Solved&quot;)&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Difficulty circular indicators (share of total)&#10;                    Row(modifier = Modifier.fillMaxWidth()) {&#10;                        DifficultyIndicator(&#10;                            label = &quot;Easy&quot;,&#10;                            count = solvedEasy,&#10;                            total = easyTotal,&#10;                            progressColor = Color(0xFF4CAF50),&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                        DifficultyIndicator(&#10;                            label = &quot;Medium&quot;,&#10;                            count = solvedMedium,&#10;                            total = mediumTotal,&#10;                            progressColor = Color(0xFFFF9800),&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                        DifficultyIndicator(&#10;                            label = &quot;Hard&quot;,&#10;                            count = solvedHard,&#10;                            total = hardTotal,&#10;                            progressColor = Color(0xFFF44336),&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showEditDialog) {&#10;            UsernameEditDialog(&#10;                currentUsername = username,&#10;                onDismiss = { showEditDialog = false },&#10;                onUpdate = { newUsername -&gt; onUsernameChange(newUsername) }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Bottom sheet for image actions&#10;    ProfileImageActionSheet(&#10;        visible = showImageSheet,&#10;        hasImage = !profileImageUrl.isNullOrEmpty(),&#10;        onDismiss = { showImageSheet = false },&#10;        onUpload = {&#10;            showImageSheet = false&#10;            imagePickerLauncher.launch(&quot;image/*&quot;)&#10;        },&#10;        onRemove = {&#10;            showImageSheet = false&#10;            onDeleteProfileImage()&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun UsernameEditDialog(&#10;    currentUsername: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onUpdate: (String) -&gt; Unit&#10;) {&#10;    var newUsername by remember { mutableStateOf(currentUsername) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = { onDismiss() },&#10;        title = { Text(&quot;Edit Username&quot;) },&#10;        text = {&#10;            OutlinedTextField(&#10;                value = newUsername,&#10;                onValueChange = { newUsername = it },&#10;                label = { Text(&quot;Username&quot;) },&#10;                singleLine = true&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onUpdate(newUsername)&#10;                    onDismiss()&#10;                }&#10;            ) {&#10;                Text(&quot;Update&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            Button(onClick = { onDismiss() }) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun InDevelopmentDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Feature in Development&quot;) },&#10;        text = { Text(&quot;This feature is currently under development. Please check back later!&quot;) },&#10;        confirmButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Close&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun DifficultyIndicator(&#10;    label: String,&#10;    count: Int?,&#10;    total: Int?,&#10;    progressColor: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val c = (count ?: 0).coerceAtLeast(0)&#10;    val tRaw = total ?: c&#10;    val t = if (tRaw &lt;= 0) 1 else tRaw&#10;    val progress = (c.toFloat() / t.toFloat()).coerceIn(0f, 1f)&#10;    val totalText = total?.toString() ?: &quot;?&quot;&#10;&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Box(contentAlignment = Alignment.Center) {&#10;            CircularProgressIndicator(&#10;                progress = { progress },&#10;                strokeWidth = 6.dp,&#10;                color = progressColor,&#10;                modifier = Modifier.size(64.dp)&#10;            )&#10;            Text(&#10;                text = &quot;$c/$totalText&quot;,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;private fun ProfileImageActionSheet(&#10;    visible: Boolean,&#10;    hasImage: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onUpload: () -&gt; Unit,&#10;    onRemove: () -&gt; Unit,&#10;) {&#10;    if (!visible) return&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss&#10;    ) {&#10;        Column(modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)) {&#10;            Button(onClick = onUpload, modifier = Modifier.fillMaxWidth()) {&#10;                Text(&quot;Upload photo&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Button(&#10;                onClick = onRemove,&#10;                enabled = hasImage,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Remove current photo&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            TextButton(onClick = onDismiss, modifier = Modifier.fillMaxWidth()) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    MaterialTheme {&#10;        ProfileContent(&#10;            profileImageUrl = &quot;https://avatars.githubusercontent.com/u/1?v=4&quot;,&#10;            username = &quot;Nguyen Tan&quot;,&#10;            level = 5,&#10;            progress = 0.65f,&#10;            leetcodeUsername = &quot;tanNguyen123&quot;,&#10;            solvedCount = 350,&#10;            solvedEasy = 150,&#10;            solvedMedium = 150,&#10;            solvedHard = 50,&#10;            easyTotal = 300,&#10;            mediumTotal = 500,&#10;            hardTotal = 100,&#10;            onLeetCodeConfirm = {},&#10;            onUploadProfileImage = {},&#10;            onDeleteProfileImage = {},&#10;            onUsernameChange = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ProfileScreenFirstTimePreview() {&#10;    MaterialTheme {&#10;        ProfileContent(&#10;            profileImageUrl = null,&#10;            username = &quot;New User&quot;,&#10;            level = 1,&#10;            progress = 0.1f,&#10;            leetcodeUsername = null,&#10;            solvedCount = null,&#10;            solvedEasy = null,&#10;            solvedMedium = null,&#10;            solvedHard = null,&#10;            easyTotal = null,&#10;            mediumTotal = null,&#10;            hardTotal = null,&#10;            onLeetCodeConfirm = {},&#10;            onUploadProfileImage = {},&#10;            onDeleteProfileImage = {},&#10;            onUsernameChange = {}&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.leetnote.ui.screens.profile&#10;&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.combinedClickable&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.LinearProgressIndicator&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalBottomSheet&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.ProgressIndicatorDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import coil3.compose.AsyncImage&#10;import com.example.leetnote.R&#10;import com.example.leetnote.ui.components.ShadowButton&#10;import com.example.leetnote.ui.navigation.Screen&#10;&#10;@Composable&#10;fun ProfileScreen(&#10;    viewModel: ProfileViewModel&#10;) {&#10;    val state by viewModel.uiState.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val error by viewModel.error.collectAsState()&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Show loading indicator&#10;        if (isLoading) {&#10;            LinearProgressIndicator(modifier = Modifier.fillMaxWidth())&#10;        }&#10;&#10;        // Show error message&#10;        error?.let { msg -&gt;&#10;            Text(&#10;                text = msg,&#10;                color = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;&#10;        // Profile content&#10;        ProfileContent(&#10;            profileImageUrl = state.profileImageUrl,&#10;            username = state.username,&#10;            level = state.level,&#10;            progress = state.progress,&#10;            leetcodeUsername = state.leetcodeUsername,&#10;            solvedCount = state.solvedCount,&#10;            solvedEasy = state.solvedEasy,&#10;            solvedMedium = state.solvedMedium,&#10;            solvedHard = state.solvedHard,&#10;            easyTotal = 907,&#10;            mediumTotal = 1933,&#10;            hardTotal = 876,&#10;            onLeetCodeConfirm = { viewModel.connectLeetCode(it) },&#10;            onUploadProfileImage = { newUrl -&gt; viewModel.uploadProfileImage(newUrl) },&#10;            onDeleteProfileImage = { viewModel.deleteProfileImage() },&#10;            onUsernameChange = { newUsername -&gt; viewModel.updateUsername(newUsername) }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ProfileContent(&#10;    profileImageUrl: String?,&#10;    username: String,&#10;    level: Int,&#10;    progress: Float,&#10;    leetcodeUsername: String?,&#10;    solvedCount: Int?,&#10;    solvedEasy: Int?,&#10;    solvedMedium: Int?,&#10;    solvedHard: Int?,&#10;    easyTotal: Int?,&#10;    mediumTotal: Int?,&#10;    hardTotal: Int?,&#10;    onLeetCodeConfirm: (String) -&gt; Unit,&#10;    onUploadProfileImage: (String) -&gt; Unit,&#10;    onDeleteProfileImage: () -&gt; Unit,&#10;    onUsernameChange: (String) -&gt; Unit&#10;) {&#10;    var input by remember { mutableStateOf(&quot;&quot;) }&#10;    var showEditDialog by remember { mutableStateOf(false) }&#10;&#10;    // Bottom sheet visibility&#10;    var showImageSheet by remember { mutableStateOf(false) }&#10;&#10;    // Image picker for uploading a new photo&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let { onUploadProfileImage(it.toString()) }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Profile row (image + username + level)&#10;        Row(verticalAlignment = Alignment.CenterVertically) {&#10;            if (!profileImageUrl.isNullOrEmpty()) {&#10;                AsyncImage(&#10;                    model = profileImageUrl,&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = Modifier&#10;                        .size(72.dp)&#10;                        .border(2.dp, MaterialTheme.colorScheme.outline, CircleShape)&#10;                        .clip(CircleShape)&#10;                        .combinedClickable(&#10;                            onClick = {},&#10;                            onLongClick = { showImageSheet = true }&#10;                        )&#10;                )&#10;            } else {&#10;                Image(&#10;                    painter = painterResource(id = R.drawable.default_profile_photo),&#10;                    contentDescription = &quot;Profile Image&quot;,&#10;                    modifier = Modifier&#10;                        .size(72.dp)&#10;                        .border(2.dp, MaterialTheme.colorScheme.outline, CircleShape)&#10;                        .clip(CircleShape)&#10;                        .combinedClickable(&#10;                            onClick = {},&#10;                            onLongClick = { showImageSheet = true }&#10;                        )&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            Column {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Text(&#10;                        text = username.ifEmpty { &quot;No username&quot; },&#10;                        style = MaterialTheme.typography.titleLarge&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Icon(&#10;                        imageVector = Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit username&quot;,&#10;                        modifier = Modifier&#10;                            .size(20.dp)&#10;                            .clickable { showEditDialog = true }&#10;                    )&#10;                }&#10;&#10;                // Level + progress bar&#10;                Text(text = &quot;Level $level&quot;, style = MaterialTheme.typography.bodyMedium)&#10;                LinearProgressIndicator(&#10;                    progress = { progress },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth(0.6f)&#10;                        .height(8.dp)&#10;                        .clip(RoundedCornerShape(4.dp)),&#10;                    color = ProgressIndicatorDefaults.linearColor,&#10;                    trackColor = ProgressIndicatorDefaults.linearTrackColor,&#10;                    strokeCap = ProgressIndicatorDefaults.LinearStrokeCap,&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // LeetCode connection section&#10;        if (leetcodeUsername == null) {&#10;            // First-time user: ask for LeetCode username&#10;            Text(text = &quot;Connect your LeetCode profile&quot;, style = MaterialTheme.typography.titleMedium)&#10;            OutlinedTextField(&#10;                value = input,&#10;                onValueChange = { input = it },&#10;                label = { Text(&quot;LeetCode Username&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            ShadowButton(&#10;                text = &quot;Confirm&quot;,&#10;                onClick = { onLeetCodeConfirm(input) },&#10;                modifier = Modifier.align(Alignment.End),&#10;                foregroundColor = Color(0xFF7B9EFF),&#10;                contentColor = Color.White&#10;            )&#10;        } else {&#10;            // Show LeetCode profile&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 16.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                elevation = CardDefaults.cardElevation(6.dp)&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;LeetCode: $leetcodeUsername&quot;,&#10;                        style = MaterialTheme.typography.titleMedium&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Circular solved count&#10;                    Box(contentAlignment = Alignment.Center) {&#10;                        CircularProgressIndicator(&#10;                            progress = { (solvedCount?.coerceAtMost(2000) ?: 0) / 2000f },&#10;                            strokeWidth = 8.dp,&#10;                            modifier = Modifier.size(120.dp)&#10;                        )&#10;                        Text(&#10;                            text = &quot;${solvedCount ?: 0}&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                    }&#10;                    Text(&quot;Problems Solved&quot;)&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Difficulty circular indicators (share of total)&#10;                    Row(modifier = Modifier.fillMaxWidth()) {&#10;                        DifficultyIndicator(&#10;                            label = &quot;Easy&quot;,&#10;                            count = solvedEasy,&#10;                            total = easyTotal,&#10;                            progressColor = Color(0xFF4CAF50),&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                        DifficultyIndicator(&#10;                            label = &quot;Medium&quot;,&#10;                            count = solvedMedium,&#10;                            total = mediumTotal,&#10;                            progressColor = Color(0xFFFF9800),&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                        DifficultyIndicator(&#10;                            label = &quot;Hard&quot;,&#10;                            count = solvedHard,&#10;                            total = hardTotal,&#10;                            progressColor = Color(0xFFF44336),&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        if (showEditDialog) {&#10;            UsernameEditDialog(&#10;                currentUsername = username,&#10;                onDismiss = { showEditDialog = false },&#10;                onUpdate = { newUsername -&gt; onUsernameChange(newUsername) }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Bottom sheet for image actions&#10;    ProfileImageActionSheet(&#10;        visible = showImageSheet,&#10;        hasImage = !profileImageUrl.isNullOrEmpty(),&#10;        onDismiss = { showImageSheet = false },&#10;        onUpload = {&#10;            showImageSheet = false&#10;            imagePickerLauncher.launch(&quot;image/*&quot;)&#10;        },&#10;        onRemove = {&#10;            showImageSheet = false&#10;            onDeleteProfileImage()&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun UsernameEditDialog(&#10;    currentUsername: String,&#10;    onDismiss: () -&gt; Unit,&#10;    onUpdate: (String) -&gt; Unit&#10;) {&#10;    var newUsername by remember { mutableStateOf(currentUsername) }&#10;&#10;    AlertDialog(&#10;        onDismissRequest = { onDismiss() },&#10;        title = { Text(&quot;Edit Username&quot;) },&#10;        text = {&#10;            OutlinedTextField(&#10;                value = newUsername,&#10;                onValueChange = { newUsername = it },&#10;                label = { Text(&quot;Username&quot;) },&#10;                singleLine = true&#10;            )&#10;        },&#10;        confirmButton = {&#10;            Button(&#10;                onClick = {&#10;                    onUpdate(newUsername)&#10;                    onDismiss()&#10;                }&#10;            ) {&#10;                Text(&quot;Update&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            Button(onClick = { onDismiss() }) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;fun InDevelopmentDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { Text(&quot;Feature in Development&quot;) },&#10;        text = { Text(&quot;This feature is currently under development. Please check back later!&quot;) },&#10;        confirmButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Close&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun DifficultyIndicator(&#10;    label: String,&#10;    count: Int?,&#10;    total: Int?,&#10;    progressColor: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val c = (count ?: 0).coerceAtLeast(0)&#10;    val tRaw = total ?: c&#10;    val t = if (tRaw &lt;= 0) 1 else tRaw&#10;    val progress = (c.toFloat() / t.toFloat()).coerceIn(0f, 1f)&#10;    val totalText = total?.toString() ?: &quot;?&quot;&#10;&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Box(contentAlignment = Alignment.Center) {&#10;            CircularProgressIndicator(&#10;                progress = { progress },&#10;                strokeWidth = 6.dp,&#10;                color = progressColor,&#10;                modifier = Modifier.size(64.dp)&#10;            )&#10;            Text(&#10;                text = &quot;$c/$totalText&quot;,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;private fun ProfileImageActionSheet(&#10;    visible: Boolean,&#10;    hasImage: Boolean,&#10;    onDismiss: () -&gt; Unit,&#10;    onUpload: () -&gt; Unit,&#10;    onRemove: () -&gt; Unit,&#10;) {&#10;    if (!visible) return&#10;&#10;    ModalBottomSheet(&#10;        onDismissRequest = onDismiss&#10;    ) {&#10;        Column(modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)) {&#10;            Button(onClick = onUpload, modifier = Modifier.fillMaxWidth()) {&#10;                Text(&quot;Upload photo&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Button(&#10;                onClick = onRemove,&#10;                enabled = hasImage,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&quot;Remove current photo&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            TextButton(onClick = onDismiss, modifier = Modifier.fillMaxWidth()) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ProfileScreenPreview() {&#10;    MaterialTheme {&#10;        ProfileContent(&#10;            profileImageUrl = &quot;https://avatars.githubusercontent.com/u/1?v=4&quot;,&#10;            username = &quot;Nguyen Tan&quot;,&#10;            level = 5,&#10;            progress = 0.65f,&#10;            leetcodeUsername = &quot;tanNguyen123&quot;,&#10;            solvedCount = 350,&#10;            solvedEasy = 150,&#10;            solvedMedium = 150,&#10;            solvedHard = 50,&#10;            easyTotal = 300,&#10;            mediumTotal = 500,&#10;            hardTotal = 100,&#10;            onLeetCodeConfirm = {},&#10;            onUploadProfileImage = {},&#10;            onDeleteProfileImage = {},&#10;            onUsernameChange = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ProfileScreenFirstTimePreview() {&#10;    MaterialTheme {&#10;        ProfileContent(&#10;            profileImageUrl = null,&#10;            username = &quot;New User&quot;,&#10;            level = 1,&#10;            progress = 0.1f,&#10;            leetcodeUsername = null,&#10;            solvedCount = null,&#10;            solvedEasy = null,&#10;            solvedMedium = null,&#10;            solvedHard = null,&#10;            easyTotal = null,&#10;            mediumTotal = null,&#10;            hardTotal = null,&#10;            onLeetCodeConfirm = {},&#10;            onUploadProfileImage = {},&#10;            onDeleteProfileImage = {},&#10;            onUsernameChange = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>