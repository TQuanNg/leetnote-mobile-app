<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/MainScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/MainScreen.kt" />
              <option name="originalContent" value="package com.example.leetnote.ui&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.leetnote.ui.components.GuidancePopup&#10;import com.example.leetnote.ui.navigation.NavigationGraph&#10;import com.example.leetnote.ui.navigation.Screen&#10;&#10;@Composable&#10;fun MainScreen(&#10;    modifier: Modifier&#10;) {&#10;    val navController = rememberNavController()&#10;    val backStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = backStackEntry?.destination?.route&#10;    val currentScreen = Screen.allScreens.find { it.route == currentRoute } ?: Screen.Home&#10;    val canNavigateBack = navController.previousBackStackEntry != null &amp;&amp;&#10;            currentRoute !in Screen.bottomNavScreens.map { it.route }&#10;    val showTopBar = currentRoute !in listOf(&#10;        Screen.Login.route,&#10;        Screen.Signup.route,&#10;        Screen.Onboarding.route,&#10;        Screen.Splash.route,&#10;        Screen.EvaluationDetail.route&#10;    )&#10;&#10;    Scaffold(&#10;        contentWindowInsets = WindowInsets(0),&#10;        topBar = {&#10;            if (showTopBar) {&#10;                AppBar(&#10;                    currentScreen = currentScreen,&#10;                    canNavigateBack = canNavigateBack,&#10;                    navigateUp = { navController.navigateUp() },&#10;                    navController = navController,&#10;                    modifier = modifier,&#10;                )&#10;            }&#10;        },&#10;        bottomBar = {&#10;            if (currentRoute in Screen.bottomNavScreens.map { it.route}) {&#10;                BottomNavBar(navController = navController)&#10;            }&#10;&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(modifier = Modifier.padding(innerPadding)) {&#10;            NavigationGraph(navController = navController)&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AppBar(&#10;    currentScreen: Screen,&#10;    canNavigateBack: Boolean,&#10;    navigateUp: () -&gt; Unit,&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier,&#10;) {&#10;    var showGuidancePopup by remember { mutableStateOf(false) }&#10;&#10;    TopAppBar(&#10;        title = { Text(&#10;            text = currentScreen.title,&#10;            fontWeight = FontWeight.Bold&#10;        ) },&#10;        navigationIcon = {&#10;            if (canNavigateBack) {&#10;                IconButton(onClick = navigateUp) {&#10;                    Icon(&#10;                        imageVector = Icons.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back button&quot;,&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Color(0xFF6B83DA), // background color&#10;            titleContentColor = Color.White,     // title text color&#10;            navigationIconContentColor = Color.White // nav icon color&#10;        ),&#10;        actions = {&#10;            currentScreen.topIconRes?.let { iconRes -&gt;&#10;                IconButton(onClick = {&#10;                    when (currentScreen) {&#10;                        is Screen.Home -&gt; {&#10;                            navController.navigate(Screen.Settings.route)&#10;                        }&#10;                        is Screen.Solving -&gt; {&#10;                            showGuidancePopup = true&#10;                        }&#10;                        else -&gt; {}&#10;                    }&#10;                }) {&#10;                    Icon(&#10;                        painter = painterResource(id = iconRes),&#10;                        contentDescription = &quot;Top icon&quot;,&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    // Show guidance popup for solving screen&#10;    if (currentScreen is Screen.Solving) {&#10;        GuidancePopup(&#10;            isVisible = showGuidancePopup,&#10;            onDismiss = { showGuidancePopup = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavBar(navController: NavHostController) {&#10;    val items = listOf(Screen.Home, Screen.Profile, Screen.Learning)&#10;    val currentBackStack by navController.currentBackStackEntryAsState()&#10;    val currentRoute = currentBackStack?.destination?.route&#10;&#10;    Column {&#10;        // Top border line&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(2.dp) // thickness of the border&#10;                .background(Color.Black) // border color (neo-brutalism style)&#10;        )&#10;&#10;        NavigationBar {&#10;            items.forEach { screen -&gt;&#10;                NavigationBarItem(&#10;                    selected = currentRoute == screen.route,&#10;                    onClick = {&#10;                        if (currentRoute != screen.route) {&#10;                            navController.navigate(screen.route) {&#10;                                popUpTo(navController.graph.startDestinationId) {&#10;                                    saveState = true&#10;                                }&#10;                                launchSingleTop = true&#10;                                restoreState = true&#10;                            }&#10;                        }&#10;                    },&#10;                    icon = {&#10;                        screen.iconRes?.let {&#10;                            Icon(&#10;                                painter = painterResource(id = it),&#10;                                contentDescription = screen.title&#10;                            )&#10;                        }&#10;                    },&#10;                    label = { Text(screen.title) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.leetnote.ui&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.NavigationBar&#10;import androidx.compose.material3.NavigationBarItem&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.leetnote.ui.components.GuidancePopup&#10;import com.example.leetnote.ui.navigation.NavigationGraph&#10;import com.example.leetnote.ui.navigation.Screen&#10;&#10;@Composable&#10;fun MainScreen(&#10;    modifier: Modifier&#10;) {&#10;    val navController = rememberNavController()&#10;    val backStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = backStackEntry?.destination?.route&#10;    val currentScreen = Screen.allScreens.find { it.route == currentRoute } ?: Screen.Home&#10;    val canNavigateBack = navController.previousBackStackEntry != null &amp;&amp;&#10;            currentRoute !in Screen.bottomNavScreens.map { it.route }&#10;    val showTopBar = currentRoute !in listOf(&#10;        Screen.Login.route,&#10;        Screen.Signup.route,&#10;        Screen.Onboarding.route,&#10;        Screen.Splash.route,&#10;        Screen.EvaluationDetail.route&#10;    )&#10;&#10;    Scaffold(&#10;        contentWindowInsets = WindowInsets(0),&#10;        topBar = {&#10;            if (showTopBar) {&#10;                AppBar(&#10;                    currentScreen = currentScreen,&#10;                    canNavigateBack = canNavigateBack,&#10;                    navigateUp = { navController.navigateUp() },&#10;                    navController = navController,&#10;                    modifier = modifier,&#10;                )&#10;            }&#10;        },&#10;        bottomBar = {&#10;            if (currentRoute in Screen.bottomNavScreens.map { it.route}) {&#10;                BottomNavBar(navController = navController)&#10;            }&#10;&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(modifier = Modifier.padding(innerPadding)) {&#10;            NavigationGraph(navController = navController)&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AppBar(&#10;    currentScreen: Screen,&#10;    canNavigateBack: Boolean,&#10;    navigateUp: () -&gt; Unit,&#10;    navController: NavController,&#10;    modifier: Modifier = Modifier,&#10;) {&#10;    var showGuidancePopup by remember { mutableStateOf(false) }&#10;&#10;    TopAppBar(&#10;        title = { Text(&#10;            text = currentScreen.title,&#10;            fontWeight = FontWeight.Bold&#10;        ) },&#10;        navigationIcon = {&#10;            if (canNavigateBack) {&#10;                IconButton(onClick = navigateUp) {&#10;                    Icon(&#10;                        imageVector = Icons.Filled.ArrowBack,&#10;                        contentDescription = &quot;Back button&quot;,&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        colors = TopAppBarDefaults.topAppBarColors(&#10;            containerColor = Color(0xFF6B83DA), // background color&#10;            titleContentColor = Color.White,     // title text color&#10;            navigationIconContentColor = Color.White // nav icon color&#10;        ),&#10;        actions = {&#10;            currentScreen.topIconRes?.let { iconRes -&gt;&#10;                IconButton(onClick = {&#10;                    when (currentScreen) {&#10;                        is Screen.Home -&gt; {&#10;                            navController.navigate(Screen.Settings.route)&#10;                        }&#10;                        is Screen.Solving -&gt; {&#10;                            showGuidancePopup = true&#10;                        }&#10;                        else -&gt; {}&#10;                    }&#10;                }) {&#10;                    Icon(&#10;                        painter = painterResource(id = iconRes),&#10;                        contentDescription = &quot;Top icon&quot;,&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    )&#10;&#10;    // Show guidance popup for solving screen&#10;    if (currentScreen is Screen.Solving) {&#10;        GuidancePopup(&#10;            isVisible = showGuidancePopup,&#10;            onDismiss = { showGuidancePopup = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BottomNavBar(navController: NavHostController) {&#10;    val items = listOf(Screen.Home, Screen.Profile, Screen.Learning)&#10;    val currentBackStack by navController.currentBackStackEntryAsState()&#10;    val currentRoute = currentBackStack?.destination?.route&#10;&#10;    Column {&#10;        // Top border line&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(2.dp) // thickness of the border&#10;                .background(Color.Black) // border color (neo-brutalism style)&#10;        )&#10;&#10;        NavigationBar {&#10;            items.forEach { screen -&gt;&#10;                NavigationBarItem(&#10;                    selected = currentRoute == screen.route,&#10;                    onClick = {&#10;                        if (currentRoute != screen.route) {&#10;                            navController.navigate(screen.route) {&#10;                                popUpTo(navController.graph.startDestinationId) {&#10;                                    saveState = true&#10;                                }&#10;                                launchSingleTop = true&#10;                                restoreState = true&#10;                            }&#10;                        }&#10;                    },&#10;                    icon = {&#10;                        screen.iconRes?.let {&#10;                            Icon(&#10;                                painter = painterResource(id = it),&#10;                                contentDescription = screen.title&#10;                            )&#10;                        }&#10;                    },&#10;                    label = { Text(screen.title) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/navigation/NavigationGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/navigation/NavigationGraph.kt" />
              <option name="originalContent" value="package com.example.leetnote.ui.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.leetnote.ui.screens.home.HomeScreen&#10;import com.example.leetnote.ui.screens.learning.LearningResourcesScreen&#10;import com.example.leetnote.ui.screens.problem.ProblemScreen&#10;import com.example.leetnote.ui.screens.solving.SolvingScreen&#10;import com.example.leetnote.ui.screens.home.HomeViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.leetnote.ui.screens.solving.EvaluationScreen&#10;import com.example.leetnote.ui.screens.learning.LearningItemScreen&#10;import com.example.leetnote.ui.screens.setting.SettingScreen&#10;import com.example.leetnote.ui.screens.problem.SolutionScreen&#10;import com.example.leetnote.ui.screens.learning.LearningResViewModel&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import com.example.leetnote.ui.screens.login.AuthViewModel&#10;import com.example.leetnote.ui.screens.login.LoginScreen&#10;import com.example.leetnote.ui.screens.login.SignupScreen&#10;import com.example.leetnote.ui.screens.onboarding.OnboardingScreen&#10;import com.example.leetnote.ui.screens.profile.EvaluationDetailScreen&#10;import com.example.leetnote.ui.screens.profile.ProfileScreen&#10;import com.example.leetnote.ui.screens.profile.ProfileViewModel&#10;import com.example.leetnote.ui.screens.splash.SplashScreen&#10;&#10;@Composable&#10;fun NavigationGraph(navController: NavHostController) {&#10;    NavHost(navController, startDestination = Screen.Splash.route) {&#10;        composable(Screen.Splash.route) {&#10;            SplashScreen(navController)&#10;        }&#10;        composable(Screen.Login.route) {&#10;            val viewModel: AuthViewModel = hiltViewModel()&#10;            LoginScreen(&#10;                navController,&#10;                viewModel = viewModel&#10;            )&#10;&#10;            val currentUser by viewModel.currentUser.collectAsState()&#10;            LaunchedEffect(currentUser) {&#10;                if (currentUser != null) {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.Login.route) { inclusive = true } // clear backstack&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        composable(Screen.Signup.route) {&#10;            val viewModel: AuthViewModel = hiltViewModel()&#10;            SignupScreen(navController, viewModel)&#10;        }&#10;        composable(Screen.Onboarding.route) {&#10;            OnboardingScreen(navController)&#10;        }&#10;        composable(Screen.Home.route) {backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                navController.getBackStackEntry(Screen.Home.route)&#10;            }&#10;            val viewModel: HomeViewModel = hiltViewModel(parentEntry)&#10;            HomeScreen(navController, viewModel)&#10;        }&#10;        composable(Screen.Profile.route) {&#10;            val viewModel: ProfileViewModel = hiltViewModel()&#10;            ProfileScreen(viewModel, navController)&#10;        }&#10;        composable(Screen.Learning.route) { LearningResourcesScreen(navController) }&#10;        composable(Screen.Settings.route) {&#10;            val viewModel: AuthViewModel = hiltViewModel()&#10;            SettingScreen(navController,viewModel)&#10;        }&#10;        composable(Screen.Problem.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            ProblemScreen(problemId = problemId, navController = navController)&#10;        }&#10;        composable(Screen.Solving.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            SolvingScreen(problemId = problemId, navController = navController)&#10;        }&#10;        composable(Screen.Solution.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            SolutionScreen(problemId = problemId)&#10;        }&#10;        composable(Screen.Evaluation.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            EvaluationScreen(problemId = problemId)&#10;        }&#10;        composable(Screen.EvaluationDetail.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            val evaluationId = backStackEntry.arguments?.getString(&quot;evaluationId&quot;)?.toLongOrNull() ?: -1&#10;            val viewModel: ProfileViewModel = hiltViewModel()&#10;            EvaluationDetailScreen(&#10;                problemId = problemId, &#10;                evaluationId = evaluationId,&#10;                onNavigateBack = { navController.popBackStack() },&#10;                viewModel = viewModel&#10;            )&#10;        }&#10;        composable(Screen.LearningItem.route) { backStackEntry -&gt;&#10;            val patternId = backStackEntry.arguments?.getString(&quot;patternId&quot;)?.toIntOrNull() ?: -1&#10;            val viewModel: LearningResViewModel = hiltViewModel()&#10;            val patterns by viewModel.patterns.collectAsState()&#10;            val pattern = patterns.find { it.id == patternId }&#10;            pattern?.let { LearningItemScreen(it) }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.leetnote.ui.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.leetnote.ui.screens.home.HomeScreen&#10;import com.example.leetnote.ui.screens.learning.LearningResourcesScreen&#10;import com.example.leetnote.ui.screens.problem.ProblemScreen&#10;import com.example.leetnote.ui.screens.solving.SolvingScreen&#10;import com.example.leetnote.ui.screens.home.HomeViewModel&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.leetnote.ui.screens.solving.EvaluationScreen&#10;import com.example.leetnote.ui.screens.learning.LearningItemScreen&#10;import com.example.leetnote.ui.screens.setting.SettingScreen&#10;import com.example.leetnote.ui.screens.problem.SolutionScreen&#10;import com.example.leetnote.ui.screens.learning.LearningResViewModel&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import com.example.leetnote.ui.screens.login.AuthViewModel&#10;import com.example.leetnote.ui.screens.login.LoginScreen&#10;import com.example.leetnote.ui.screens.login.SignupScreen&#10;import com.example.leetnote.ui.screens.onboarding.OnboardingScreen&#10;import com.example.leetnote.ui.screens.profile.EvaluationDetailScreen&#10;import com.example.leetnote.ui.screens.profile.ProfileScreen&#10;import com.example.leetnote.ui.screens.profile.ProfileViewModel&#10;import com.example.leetnote.ui.screens.splash.SplashScreen&#10;&#10;@Composable&#10;fun NavigationGraph(navController: NavHostController) {&#10;    NavHost(navController, startDestination = Screen.Splash.route) {&#10;        composable(Screen.Splash.route) {&#10;            SplashScreen(navController)&#10;        }&#10;        composable(Screen.Login.route) {&#10;            val viewModel: AuthViewModel = hiltViewModel()&#10;            LoginScreen(&#10;                navController,&#10;                viewModel = viewModel&#10;            )&#10;&#10;            val currentUser by viewModel.currentUser.collectAsState()&#10;            LaunchedEffect(currentUser) {&#10;                if (currentUser != null) {&#10;                    navController.navigate(Screen.Home.route) {&#10;                        popUpTo(Screen.Login.route) { inclusive = true } // clear backstack&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        composable(Screen.Signup.route) {&#10;            val viewModel: AuthViewModel = hiltViewModel()&#10;            SignupScreen(navController, viewModel)&#10;        }&#10;        composable(Screen.Onboarding.route) {&#10;            OnboardingScreen(navController)&#10;        }&#10;        composable(Screen.Home.route) {backStackEntry -&gt;&#10;            val parentEntry = remember(backStackEntry) {&#10;                navController.getBackStackEntry(Screen.Home.route)&#10;            }&#10;            val viewModel: HomeViewModel = hiltViewModel(parentEntry)&#10;            HomeScreen(navController, viewModel)&#10;        }&#10;        composable(Screen.Profile.route) {&#10;            val viewModel: ProfileViewModel = hiltViewModel()&#10;            ProfileScreen(viewModel, navController)&#10;        }&#10;        composable(Screen.Learning.route) { LearningResourcesScreen(navController) }&#10;        composable(Screen.Settings.route) {&#10;            val viewModel: AuthViewModel = hiltViewModel()&#10;            SettingScreen(navController,viewModel)&#10;        }&#10;        composable(Screen.Problem.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            ProblemScreen(problemId = problemId, navController = navController)&#10;        }&#10;        composable(Screen.Solving.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            SolvingScreen(problemId = problemId, navController = navController)&#10;        }&#10;        composable(Screen.Solution.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            SolutionScreen(problemId = problemId)&#10;        }&#10;        composable(Screen.Evaluation.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            EvaluationScreen(problemId = problemId)&#10;        }&#10;        composable(Screen.EvaluationDetail.route) { backStackEntry -&gt;&#10;            val problemId = backStackEntry.arguments?.getString(&quot;problemId&quot;)?.toLongOrNull() ?: -1&#10;            val evaluationId = backStackEntry.arguments?.getString(&quot;evaluationId&quot;)?.toLongOrNull() ?: -1&#10;            val viewModel: ProfileViewModel = hiltViewModel()&#10;            EvaluationDetailScreen(&#10;                problemId = problemId, &#10;                evaluationId = evaluationId,&#10;                onNavigateBack = { navController.popBackStack() },&#10;                viewModel = viewModel&#10;            )&#10;        }&#10;        composable(Screen.LearningItem.route) { backStackEntry -&gt;&#10;            val patternId = backStackEntry.arguments?.getString(&quot;patternId&quot;)?.toIntOrNull() ?: -1&#10;            val viewModel: LearningResViewModel = hiltViewModel()&#10;            val patterns by viewModel.patterns.collectAsState()&#10;            val pattern = patterns.find { it.id == patternId }&#10;            pattern?.let { LearningItemScreen(it) }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/screens/onboarding/OnboardingViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/leetnote/ui/screens/onboarding/OnboardingViewModel.kt" />
              <option name="originalContent" value="package com.example.leetnote.ui.screens.onboarding&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.leetnote.data.repository.OnboardingRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class OnboardingViewModel @Inject constructor(&#10;    private val repository: OnboardingRepository&#10;): ViewModel() {&#10;    val isOnboardingCompleted: StateFlow&lt;Boolean?&gt; =&#10;        repository.isOnboardingCompleted()&#10;            .stateIn(&#10;                scope = viewModelScope, &#10;                started = SharingStarted.WhileSubscribed(5000L), &#10;                initialValue = null&#10;            )&#10;&#10;    fun completeOnboarding() {&#10;        viewModelScope.launch {&#10;            repository.setOnboardingCompleted(true)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.leetnote.ui.screens.onboarding&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.leetnote.data.repository.OnboardingRepository&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class OnboardingViewModel @Inject constructor(&#10;    private val repository: OnboardingRepository&#10;): ViewModel() {&#10;    val isOnboardingCompleted: StateFlow&lt;Boolean?&gt; =&#10;        repository.isOnboardingCompleted()&#10;            .stateIn(&#10;                scope = viewModelScope, &#10;                started = SharingStarted.WhileSubscribed(5000L), &#10;                initialValue = null&#10;            )&#10;&#10;    fun completeOnboarding() {&#10;        viewModelScope.launch {&#10;            repository.setOnboardingCompleted(true)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>